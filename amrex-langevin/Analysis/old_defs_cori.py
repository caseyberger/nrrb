import os
import numpy as np

def extract_parameters(workdir,input_filename):
	#takes input file generated by AMReX and reads from it the various parameters. 
	#returns a dictionary of all the values
    input_file = workdir+'/'+input_filename
    fo = open(input_file, "r")
    parameters = dict()
    for line in fo.readlines():
        #print(line)
        if line.startswith("nsteps"):
            temp = line.split()
            parameters["nL"] = int(temp[-1])
        elif line.startswith("n_cell"):
            temp = line.split()
            parameters["Nx"] = int(temp[2])
            parameters["Nt"] = int(temp[-1])
        elif line.startswith("nrrb.l"):
            temp = line.split()
            parameters["lambda"] = float(temp[-1])
        elif line.startswith("nrrb.mu"):
            temp = line.split()
            parameters["mu"] = float(temp[-1])
        elif line.startswith("nrrb.m"):
            temp = line.split()
            parameters["m"] = float(temp[-1])
        elif line.startswith("nrrb.w"):
            temp = line.split()
            if temp[0] == "nrrb.w_t":
                parameters["wtr"] = float(temp[-1])
            else:
                parameters["wz"] = float(temp[-1])
        elif line.startswith("nrrb.dtau"):
            temp = line.split()
            parameters["dt"] = float(temp[-1])
        elif line.startswith("nrrb.eps"):
            temp = line.split()
            parameters["eps"] = float(temp[-1])
    parameters["beta"] = parameters["dt"]*parameters["Nt"]
    fo.close()
    return parameters

def average_observables(workdir,obs_filename,params,therm_step = None):
	#step  Re[phi^{*}phi]      Im[phi^{*}phi]      Re[<n>]             Im[<n>]             Re[<Lz>]            Im[<Lz>]            Re[<S>]             Im[<S>]             dt (sec)
	if therm_step == None:
		therm_step = int(0.2*float(params['nL']))
	else:
		therm_step = int(therm_step)
	obs_file = workdir+'/'+obs_filename
	fo = open(obs_file, "r")
	lines = fo.readlines()
	fo.close()
	therm_data = lines[therm_step+1:]
	Re_field_modulus = []
	Im_field_modulus = []
	Re_density = []
	Im_density = []
	Re_angular_momentum = []
	Im_angular_momentum = []
	Re_action = []
	Im_action = []
	for line in therm_data:
		line = line.strip('\n')
		temp = line.split(' ')
		temp = list(filter(None,temp))
		#print(temp)
		Re_field_modulus.append(float(temp[1]))
		Im_field_modulus.append(float(temp[2]))
		Re_density.append(float(temp[3]))
		Im_density.append(float(temp[4]))
		Re_angular_momentum.append(float(temp[5]))
		Im_angular_momentum.append(float(temp[6]))
		Re_action.append(float(temp[7]))
		Im_action.append(float(temp[8]))
	data = dict()
	data["Re Phisq"] = [np.mean(Re_field_modulus),np.std(Re_field_modulus)]
	data["Im Phisq"] = [np.mean(Im_field_modulus),np.std(Im_field_modulus)]
	data["Re n"] = [np.mean(Re_density),np.std(Re_density)]
	data["Im n"] = [np.mean(Im_density),np.std(Im_density)]
	data["Re Lz"] = [np.mean(Re_angular_momentum),np.std(Re_angular_momentum)]
	data["Im Lz"] = [np.mean(Im_angular_momentum),np.std(Im_angular_momentum)]
	data["Re S"] = [np.mean(Re_action),np.std(Re_action)]
	data["Im S"] = [np.mean(Im_action),np.std(Im_action)]
	return data

#DELETE EVERYTHING BELOW HERE WHEN YOU'RE DONE WITH THIS ANALYSIS CODE
def find_missing_files(all_steps, all_plotfiles):
    missing = []
    for step in all_steps:
        if step not in all_plotfiles:
            missing.append(step)
    return missing

def make_file_lists(subdir):
    all_files = os.listdir(subdir)
    all_plotfiles = []
    for filename in all_files:
        if filename.startswith("inputs"):
            input_filename = filename
    for pltfile in all_files:
        if pltfile.startswith("plt"):
            all_plotfiles.append(int(pltfile[3:]))
    parameters = extract_parameters(subdir,input_filename)
    nL = parameters['nL']
    all_steps = np.arange(0,nL,1)
    return input_filename, all_plotfiles, all_steps, parameters
